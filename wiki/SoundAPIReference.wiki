#summary SoundAPI reference
#sidebar Sidebar

<p>*Last revision:* ver. 1.0 - 11 February 2013</p>

<wiki:toc max_depth="2" />

= SoundAPI reference =
The Omicron Sound API allows CAVE2 developers a simple way to trigger, place, and update sounds in virtual space. The API sends simple Open Sound Control (OSC) messages to a Supercollider server developed by JD Pirtle.


-------------------------------------------------------------------------------
==  `class SoundManager` ==
Provides basic management of the sound server and sound objects. Uses the Ultra minimalistic OSC library (http://gruntthepeon.free.fr/oscpkt/).

=== Methods ===
|| Method(s) || Description || Associated OSC Messages ||
|| `connectToServer(IP, port)` || Connects to a sound server at the specified IP address and port. || ||
|| `startSoundServer()` || Starts the sound server and loads the default synthdefs. || /startServer /loadSynth /loadStereoSynth ||
|| `stopSoundServer()` || Shuts down the sound server. || /killServer ||
|| `getEnvironment()`, `setEnvironment(SoundEnvironment)` || Gets and sets the current sound environment. || ||
|| `sendOSCMessage(Message)` || Sends an OSC message to the server. || ||

-------------------------------------------------------------------------------
==  `class SoundEnvironment` ==

=== Methods ===
|| Method(s) || Description || Associated OSC Messages ||
|| *Environment Management* || || ||
|| `stopAllSounds()` || Stops any currently playing sounds in the current sound environment || /freeNode (nodeID) ||
|| `cleanupAllSounds()` || Unloads all sounds in the current sound environment. || /freeBuf (bufferID) ||
|| `getSoundManager()` || || ||
|| `getAssetDirectory()`, `setAssetDirectory(path)` || Gets and sets the default directory path for all created sounds. || ||
|| *Sound Management* || || ||
|| `loadSoundFromFile(name, fileName)` || Creates an new sound object with the given name and path to the sound file. || /loadBuffer (See Sound::loadFromFile) ||
|| `createInstance(sound)` || Creates an new sound instance from the given sound object. || ||
|| `getListenerPosition()`, `setListenerPosition(pos)` || Gets and sets the listener position. This corresponds to CAVE2's navigated position in the virtual space. || ||
|| `getListenerOrientation()`, `setListenerOrientation(orientation)` || Gets and sets the listener orientation. This corresponds to CAVE2's navigated position in the virtual space. || ||
|| `getUserPosition()`, `setuserPosition(pos)` || Gets and sets the user position. This corresponds to tracked user's head position in tracker space. || ||
|| `getListenerOrientation()`, `setListenerOrientation(orientation)` || Gets and sets the user orientation. This corresponds to tracked user's head orientation in tracker space. || ||
|| `worldToLocal(position)` || Convert a position from virtual space to local tracker/speaker space based on the listener's current orientation and position. || ||

-------------------------------------------------------------------------------
==  `class Sound` ==
A sound object storing the bufferID, filepath to the sound, and the default sound properties. These correspond to Supercollider buffers.

=== Methods ===
|| Method(s) || Description || Associated OSC Messages ||
|| `loadFromFile(path)` || Loads a sound file withe the given path. || /loadBuffer (bufferID,path) ||
|| `getVolumeScale()`, `setVolumeScale(vol)` || Gets and sets the default volume scale as a normalized float (0.0-1.0) || ||

-------------------------------------------------------------------------------
==  `class SoundInstance` ==
A sound instance object storing the associated sound object, instanceID, and sound parameters (volume, mix, reverb, etc.). These correspond to Supercollider nodes.

=== Methods ===
|| Method(s) || Description || Associated OSC Messages ||
|| *Playback* || || ||
|| `play()` || Plays a sound with the default sound parameters. || /play (instanceID, bufferID, volume, xPos, yPos, zPos, listenerX, listenerY, listenerZ, width, mix, reverb, loop) ||
|| `playStereo()` || Plays a stereo sound with the default sound parameters. || /playStereo (instanceID, bufferID, volume, loop) ||
|| `play(pos,volume,width,mix,reverb,loop)` || Plays a sound with the specified sound parameters. || /play (instanceID, bufferID, volume, xPos, yPos, zPos, listenerX, listenerY, listenerZ, width, mix, reverb, loop) ||
|| `playStereo(volume,loop)` || Plays a stereo sound with the specified sound parameters. || /play (instanceID, bufferID, volume, loop) ||
|| `stop()` || Stops the sound from playing. || /freeNode ||
|| `fade(targetVolume, duration)` || Fades the sound instance from it's current volume to the target volume over the specified duration in seconds || /setVolEnv (instanceID, targetVolume, envelopeDuration) ||
|| *Settings* || || ||
|| `getLoop()` `setLoop(loop)` || Gets and sets the looping flag. ||
|| `getPosition()`, `setPosition(pos)` || Gets and sets the position of the sound in local tracker/speaker space. || /setObjectLoc (instanceID, xPos, yPos, zPos) ||
|| `getVolume()`, `setVolume(volume)` || Gets and sets the normalized (0.0-1.0) sound instance volume. || /setVol (instanceID, volume) ||
|| `getMix()`, `setMix(mix)` || Gets and sets the normalized (0.0-1.0) sound instance mix. || ||
|| `getWidth()`, `setMix(width)` || Gets and sets the number of speakers (1-20) to pan the sound. || ||
|| `getReverb()`, `setReverb(reverb)` || Gets and sets the normalized (0.0-1.0) sound instance reverb. || ||